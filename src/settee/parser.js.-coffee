
# called with parse_object as this
_scanner= ->
  return "" if @text.length is 0
  start= 0
  index= 1
  delta= 0
  fc= @text.charAt(0)
  if fc is '(' or fc is ')'
    index= 1
    @balanced += if fc is '(' then 1 else -1
  else if fc is '"'
    index= @text.search(/[^\\]"/) + 1
    delta=1 # bizarre bugfix... need to investigate further
  else
    index= @text.search(/[ \n)]/)
  index= @text.length if index < 1
  t= @text.substring start, index
  @text= _.trim @text.substring(index + delta)
  t

_do_parse= (source)->
  parse_data=
    text: _.trim(source)
    balanced: 0
  code= ['list']
  while parse_data.text.length
    exprs=_parser.apply(parse_data)
    code= code.concat exprs
  [code, parse_data]

_parser= ->
  result=[]
  token= _scanner.apply(@)
  while token isnt ')' and token isnt ""
    expr= if token is '(' then _parser.apply(@) else token
    result.push expr
    token= _scanner.apply(@)
  result
