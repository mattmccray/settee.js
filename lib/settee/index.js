// Generated by CoffeeScript 1.6.1
var VERSION, compile, context, parse_source, settee, tag, translate, _isArray, _isString, _ref;

VERSION = '0.7.0';

if (typeof module !== "undefined" && module !== null) {
  _ref = require('./parser'), parse_source = _ref.parse_source, translate = _ref.translate, compile = _ref.compile, _isString = _ref._isString, _isArray = _ref._isArray;
  context = require('./context');
  tag = require('./tag');
}

settee = function(source) {
  var code;
  code = typeof source === 'string' ? translate(parse_source(source)) : source;
  return settee.compile(code);
};

settee.render = function(source, ctx) {
  if (ctx == null) {
    ctx = {};
  }
  return settee(source)(ctx);
};

settee.to_html = settee.render;

settee.compile = function(code, wrap) {
  var fn;
  if (wrap == null) {
    wrap = true;
  }
  fn = typeof code === 'function' ? code : compile(code);
  if (!wrap) {
    return fn;
  }
  return function(src_ctx) {
    var ctx;
    if (src_ctx == null) {
      src_ctx = {};
    }
    ctx = new context(src_ctx);
    return fn.call(ctx, tag.builder);
  };
};

settee.parse = function(source) {
  var code;
  code = parse_source(source);
  return translate(code);
};

settee.precompile = function(source) {
  var code, tmpl_fn;
  code = settee.parse(source);
  tmpl_fn = settee.compile(code, false);
  return tmpl_fn;
};

settee.define = function(tagName, handler) {
  var sub_template;
  if (_isString(handler || handler.length === 1)) {
    sub_template = settee(handler);
    handler = (function(sub_template) {
      return function(tagName, attrs, children) {
        var childcontent, ctx, elem, i, _i, _len;
        childcontent = children.join('');
        ctx = {
          tagName: tagName,
          attrs: attrs,
          blocks: childcontent,
          "yield": childcontent
        };
        for (i = _i = 0, _len = children.length; _i < _len; i = ++_i) {
          elem = children[i];
          ctx["block" + (i + 1)] = elem;
        }
        return sub_template(ctx);
      };
    })(sub_template);
  }
  tag.define(tagName, handler);
  return settee;
};

settee.undefine = function(tagName) {
  tag.undefine(tagName);
  return settee;
};

settee.noConflict = function() {
  if (typeof old_settee !== "undefined" && old_settee !== null) {
    global.settee = old_settee;
  } else {
    delete global.settee;
  }
  return settee;
};

settee.tag_builder = tag.builder;

settee.version = VERSION;

if (typeof module !== "undefined" && module !== null) {
  module.exports = settee;
  module.exports.__express = require('./express');
} else {
  this.settee = settee;
}
