// Generated by CoffeeScript 1.6.1
var tag,
  __hasProp = {}.hasOwnProperty;

tag = (function() {
  var instance;

  function tag() {}

  tag.prototype["."] = function(tag, attrs, children) {
    return children.join('');
  };

  tag.prototype["+"] = tag.prototype['.'];

  tag.prototype["if"] = function(tag, attrs, children) {
    var first;
    first = children.shift();
    if (first) {
      return children.join('');
    } else {
      return '';
    }
  };

  tag.prototype.unless = function(tag, attrs, children) {
    var first;
    first = children.shift();
    if (!first) {
      return children.join('');
    } else {
      return '';
    }
  };

  tag.prototype.ifelse = function(tag, attrs, children) {
    if (children[0]) {
      return children[1];
    } else {
      return children[2];
    }
  };

  tag.prototype.eq = function(tag, attrs, children) {
    return children[0] === children[1];
  };

  tag.prototype['is'] = tag.prototype.eq;

  tag.prototype['='] = tag.prototype.eq;

  tag.prototype.not = function(tag, attrs, children) {
    return !children[0];
  };

  tag.prototype['!'] = tag.prototype.eq;

  tag.prototype.neq = function(tag, attrs, children) {
    return children[0] !== children[1];
  };

  tag.prototype['isnt'] = tag.prototype.neq;

  tag.prototype['!='] = tag.prototype.neq;

  instance = new tag;

  tag.define = function(name, value) {
    return instance[name] = value;
  };

  tag.undefine = function(name) {
    return delete instance[name];
  };

  tag.builder = function(tag, attrs, children) {
    var attr_s, name, value;
    if (attrs == null) {
      attrs = {};
    }
    if (children == null) {
      children = [];
    }
    if (instance[tag]) {
      return instance[tag](tag, attrs, children);
    } else {
      attr_s = '';
      for (name in attrs) {
        if (!__hasProp.call(attrs, name)) continue;
        value = attrs[name];
        attr_s += " " + name + "=\"" + value + "\"";
      }
      return "<" + (tag + attr_s) + ">" + (children.join('')) + "</" + tag + ">";
    }
  };

  return tag;

})();

if (typeof module !== "undefined" && module !== null) {
  module.exports = tag;
} else {
  this.tag = tag;
}
