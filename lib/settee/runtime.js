// Generated by CoffeeScript 1.6.1
var VERSION, settee, _isString;

VERSION = '0.6.0';

_isString = function(obj) {
  return typeof obj === 'string';
};

settee = function(source) {
  var code;
  code = (function() {
    if (typeof source === 'string') {
      throw new Error("The runtime version of settee does not support parsing template strings, only precompiled templates.");
    }
  })();
  return settee.compile(source);
};

settee.render = function(source, ctx) {
  if (ctx == null) {
    ctx = {};
  }
  return settee(source)(ctx);
};

settee.compile = function(code) {
  var fn;
  fn = code;
  return function(src_ctx) {
    var ctx;
    if (src_ctx == null) {
      src_ctx = {};
    }
    ctx = new context(src_ctx);
    return fn.call(ctx, tag.builder);
  };
};

settee.define = function(tagName, handler) {
  var sub_template;
  if (_isString(handler)) {
    throw new Error("The runtime version of settee does not support parsing template strings, only precompiled templates.");
  } else if (handler.length === 1) {
    sub_template = settee(handler);
    handler = (function(sub_template) {
      return function(tagName, attrs, children) {
        var childcontent, ctx, elem, i, _i, _len;
        childcontent = children.join('');
        ctx = {
          tagName: tagName,
          attrs: attrs,
          blocks: childcontent,
          "yield": childcontent
        };
        for (i = _i = 0, _len = children.length; _i < _len; i = ++_i) {
          elem = children[i];
          ctx["block" + (i + 1)] = elem;
        }
        return sub_template(ctx);
      };
    })(sub_template);
    tag.define(tagName, handler);
  } else {
    tag.define(tagName, handler);
  }
  return settee;
};

settee.undefine = function(tagName) {
  tag.undefine(tagName);
  return settee;
};

settee.noConflict = function() {
  if (typeof old_settee !== "undefined" && old_settee !== null) {
    global.settee = old_settee;
  } else {
    delete global.settee;
  }
  return settee;
};

settee.tag_builder = tag.builder;

settee.version = VERSION;

if (typeof module !== "undefined" && module !== null) {
  module.exports = settee;
} else {
  this.settee = settee;
}
